// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: monitoralpb/monitoral.proto

package monitoralpb

import (
	_ "github.com/cretz/temporal-sdk-go-advanced/temporalproto/temporalpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HostWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Should only be set on continue-as-new
	ContinueRunRequest *HostRunRequest `protobuf:"bytes,1,opt,name=continue_run_request,json=continueRunRequest,proto3" json:"continue_run_request,omitempty"`
}

func (x *HostWorkflowRequest) Reset() {
	*x = HostWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostWorkflowRequest) ProtoMessage() {}

func (x *HostWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostWorkflowRequest.ProtoReflect.Descriptor instead.
func (*HostWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{0}
}

func (x *HostWorkflowRequest) GetContinueRunRequest() *HostRunRequest {
	if x != nil {
		return x.ContinueRunRequest
	}
	return nil
}

type HostRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This should be unique every time the host worker process is started
	TaskQueue string `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// This may be older than one from update config request, so the workflow is
	// responsible for only using the newest. Always greater than 0.
	ConfigMutationSeq uint64        `protobuf:"varint,2,opt,name=config_mutation_seq,json=configMutationSeq,proto3" json:"config_mutation_seq,omitempty"`
	Configs           []*HostConfig `protobuf:"bytes,3,rep,name=configs,proto3" json:"configs,omitempty"`
	PrevRunSnapshot   []byte        `protobuf:"bytes,4,opt,name=prev_run_snapshot,json=prevRunSnapshot,proto3" json:"prev_run_snapshot,omitempty"`
}

func (x *HostRunRequest) Reset() {
	*x = HostRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRunRequest) ProtoMessage() {}

func (x *HostRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRunRequest.ProtoReflect.Descriptor instead.
func (*HostRunRequest) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{1}
}

func (x *HostRunRequest) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *HostRunRequest) GetConfigMutationSeq() uint64 {
	if x != nil {
		return x.ConfigMutationSeq
	}
	return 0
}

func (x *HostRunRequest) GetConfigs() []*HostConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *HostRunRequest) GetPrevRunSnapshot() []byte {
	if x != nil {
		return x.PrevRunSnapshot
	}
	return nil
}

type HostUpdateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// May not be sequential, but should be discarded if this is before the last
	// received seq. Always greater than 0.
	MutationSeq uint64 `protobuf:"varint,1,opt,name=mutation_seq,json=mutationSeq,proto3" json:"mutation_seq,omitempty"`
	// This is the full set of known configs for the tags. This means on update
	// a tag can be not present here which means a deleted config.
	Configs []*HostConfig `protobuf:"bytes,2,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *HostUpdateConfigRequest) Reset() {
	*x = HostUpdateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostUpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostUpdateConfigRequest) ProtoMessage() {}

func (x *HostUpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostUpdateConfigRequest.ProtoReflect.Descriptor instead.
func (*HostUpdateConfigRequest) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{2}
}

func (x *HostUpdateConfigRequest) GetMutationSeq() uint64 {
	if x != nil {
		return x.MutationSeq
	}
	return 0
}

func (x *HostUpdateConfigRequest) GetConfigs() []*HostConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type HostDoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HostDoneRequest) Reset() {
	*x = HostDoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostDoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostDoneRequest) ProtoMessage() {}

func (x *HostDoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostDoneRequest.ProtoReflect.Descriptor instead.
func (*HostDoneRequest) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{3}
}

type HostCollectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If empty, assumes all exported metrics
	Metrics []string `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Both of these are inclusive, neither are required.
	CollectedSince *durationpb.Duration `protobuf:"bytes,2,opt,name=collected_since,json=collectedSince,proto3" json:"collected_since,omitempty"`
	CollectedUntil *durationpb.Duration `protobuf:"bytes,3,opt,name=collected_until,json=collectedUntil,proto3" json:"collected_until,omitempty"`
	// If true, only the latest metric per name is given.
	LatestOnly bool `protobuf:"varint,4,opt,name=latest_only,json=latestOnly,proto3" json:"latest_only,omitempty"`
	// Metadata needed for a "call"
	Id                 string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	ResponseTaskQueue  string `protobuf:"bytes,6,opt,name=response_task_queue,json=responseTaskQueue,proto3" json:"response_task_queue,omitempty"`
	ResponseWorkflowId string `protobuf:"bytes,7,opt,name=response_workflow_id,json=responseWorkflowId,proto3" json:"response_workflow_id,omitempty"`
}

func (x *HostCollectRequest) Reset() {
	*x = HostCollectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostCollectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostCollectRequest) ProtoMessage() {}

func (x *HostCollectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostCollectRequest.ProtoReflect.Descriptor instead.
func (*HostCollectRequest) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{4}
}

func (x *HostCollectRequest) GetMetrics() []string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *HostCollectRequest) GetCollectedSince() *durationpb.Duration {
	if x != nil {
		return x.CollectedSince
	}
	return nil
}

func (x *HostCollectRequest) GetCollectedUntil() *durationpb.Duration {
	if x != nil {
		return x.CollectedUntil
	}
	return nil
}

func (x *HostCollectRequest) GetLatestOnly() bool {
	if x != nil {
		return x.LatestOnly
	}
	return false
}

func (x *HostCollectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HostCollectRequest) GetResponseTaskQueue() string {
	if x != nil {
		return x.ResponseTaskQueue
	}
	return ""
}

func (x *HostCollectRequest) GetResponseWorkflowId() string {
	if x != nil {
		return x.ResponseWorkflowId
	}
	return ""
}

type HostCollectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// No metrics present if there is an error
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Metadata needed for a "call"
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HostCollectResponse) Reset() {
	*x = HostCollectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostCollectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostCollectResponse) ProtoMessage() {}

func (x *HostCollectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostCollectResponse.ProtoReflect.Descriptor instead.
func (*HostCollectResponse) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{5}
}

func (x *HostCollectResponse) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *HostCollectResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *HostCollectResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SystemWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemWorkflowRequest) Reset() {
	*x = SystemWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemWorkflowRequest) ProtoMessage() {}

func (x *SystemWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemWorkflowRequest.ProtoReflect.Descriptor instead.
func (*SystemWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{6}
}

type SystemUpdateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *SystemConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SystemUpdateConfigRequest) Reset() {
	*x = SystemUpdateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemUpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemUpdateConfigRequest) ProtoMessage() {}

func (x *SystemUpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemUpdateConfigRequest.ProtoReflect.Descriptor instead.
func (*SystemUpdateConfigRequest) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{7}
}

func (x *SystemUpdateConfigRequest) GetConfig() *SystemConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SystemUpdateNotificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notifications []*Notification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
}

func (x *SystemUpdateNotificationsRequest) Reset() {
	*x = SystemUpdateNotificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemUpdateNotificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemUpdateNotificationsRequest) ProtoMessage() {}

func (x *SystemUpdateNotificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemUpdateNotificationsRequest.ProtoReflect.Descriptor instead.
func (*SystemUpdateNotificationsRequest) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{8}
}

func (x *SystemUpdateNotificationsRequest) GetNotifications() []*Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type SystemGetNotificationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemGetNotificationsRequest) Reset() {
	*x = SystemGetNotificationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemGetNotificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemGetNotificationsRequest) ProtoMessage() {}

func (x *SystemGetNotificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemGetNotificationsRequest.ProtoReflect.Descriptor instead.
func (*SystemGetNotificationsRequest) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{9}
}

type SystemGetNotificationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notification          []*Notification `protobuf:"bytes,1,rep,name=notification,proto3" json:"notification,omitempty"`
	ArchivedNotifications uint64          `protobuf:"varint,3,opt,name=archived_notifications,json=archivedNotifications,proto3" json:"archived_notifications,omitempty"`
}

func (x *SystemGetNotificationsResponse) Reset() {
	*x = SystemGetNotificationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemGetNotificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemGetNotificationsResponse) ProtoMessage() {}

func (x *SystemGetNotificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemGetNotificationsResponse.ProtoReflect.Descriptor instead.
func (*SystemGetNotificationsResponse) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{10}
}

func (x *SystemGetNotificationsResponse) GetNotification() []*Notification {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *SystemGetNotificationsResponse) GetArchivedNotifications() uint64 {
	if x != nil {
		return x.ArchivedNotifications
	}
	return 0
}

type SystemGetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemGetConfigRequest) Reset() {
	*x = SystemGetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemGetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemGetConfigRequest) ProtoMessage() {}

func (x *SystemGetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemGetConfigRequest.ProtoReflect.Descriptor instead.
func (*SystemGetConfigRequest) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{11}
}

type SystemGetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// May not be sequential, but can be used to determine order. Always greater
	// than 0.
	MutationSeq uint64 `protobuf:"varint,1,opt,name=mutation_seq,json=mutationSeq,proto3" json:"mutation_seq,omitempty"`
	// Replaces entire existing config
	Config *SystemConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *SystemGetConfigResponse) Reset() {
	*x = SystemGetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemGetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemGetConfigResponse) ProtoMessage() {}

func (x *SystemGetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemGetConfigResponse.ProtoReflect.Descriptor instead.
func (*SystemGetConfigResponse) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{12}
}

func (x *SystemGetConfigResponse) GetMutationSeq() uint64 {
	if x != nil {
		return x.MutationSeq
	}
	return 0
}

func (x *SystemGetConfigResponse) GetConfig() *SystemConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type SystemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostConfigs []*HostConfig `protobuf:"bytes,1,rep,name=host_configs,json=hostConfigs,proto3" json:"host_configs,omitempty"`
	// Defaults to a reasonable number
	MaxNotifications uint32 `protobuf:"varint,2,opt,name=max_notifications,json=maxNotifications,proto3" json:"max_notifications,omitempty"`
}

func (x *SystemConfig) Reset() {
	*x = SystemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemConfig) ProtoMessage() {}

func (x *SystemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemConfig.ProtoReflect.Descriptor instead.
func (*SystemConfig) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{13}
}

func (x *SystemConfig) GetHostConfigs() []*HostConfig {
	if x != nil {
		return x.HostConfigs
	}
	return nil
}

func (x *SystemConfig) GetMaxNotifications() uint32 {
	if x != nil {
		return x.MaxNotifications
	}
	return 0
}

type HostConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag     string               `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Metrics []*HostConfig_Metric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *HostConfig) Reset() {
	*x = HostConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostConfig) ProtoMessage() {}

func (x *HostConfig) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostConfig.ProtoReflect.Descriptor instead.
func (*HostConfig) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{14}
}

func (x *HostConfig) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *HostConfig) GetMetrics() []*HostConfig_Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CollectedOn *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=collected_on,json=collectedOn,proto3" json:"collected_on,omitempty"`
	Value       *anypb.Any             `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Labels      map[string]string      `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{15}
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetCollectedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectedOn
	}
	return nil
}

func (x *Metric) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Metric) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Automatically populated if empty on update
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Only the latest of the name is active
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Detail:
	//	*Notification_AlertStarted
	//	*Notification_AlertStopped
	//	*Notification_ActivityStarted
	//	*Notification_ActivityDone
	//	*Notification_ActivityStopped
	Detail isNotification_Detail `protobuf_oneof:"detail"`
	// Automatically populated if empty on update
	StartedOn *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=started_on,json=startedOn,proto3" json:"started_on,omitempty"`
	Notes     string                 `protobuf:"bytes,10,opt,name=notes,proto3" json:"notes,omitempty"`
	Labels    map[string]string      `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Automatically defaulted to true when first seen
	Visible bool `protobuf:"varint,12,opt,name=visible,proto3" json:"visible,omitempty"`
	// This is a system controlled value, cannot be mutated. Is only true if there
	// is an active alert, activity start, or activity stop.
	Active bool `protobuf:"varint,13,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{16}
}

func (x *Notification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Notification) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Notification) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Notification) GetDetail() isNotification_Detail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (x *Notification) GetAlertStarted() *Notification_AlertChange {
	if x, ok := x.GetDetail().(*Notification_AlertStarted); ok {
		return x.AlertStarted
	}
	return nil
}

func (x *Notification) GetAlertStopped() *Notification_AlertChange {
	if x, ok := x.GetDetail().(*Notification_AlertStopped); ok {
		return x.AlertStopped
	}
	return nil
}

func (x *Notification) GetActivityStarted() *Notification_StatusChange {
	if x, ok := x.GetDetail().(*Notification_ActivityStarted); ok {
		return x.ActivityStarted
	}
	return nil
}

func (x *Notification) GetActivityDone() *Notification_StatusChange {
	if x, ok := x.GetDetail().(*Notification_ActivityDone); ok {
		return x.ActivityDone
	}
	return nil
}

func (x *Notification) GetActivityStopped() *Notification_StatusChange {
	if x, ok := x.GetDetail().(*Notification_ActivityStopped); ok {
		return x.ActivityStopped
	}
	return nil
}

func (x *Notification) GetStartedOn() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedOn
	}
	return nil
}

func (x *Notification) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Notification) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Notification) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Notification) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type isNotification_Detail interface {
	isNotification_Detail()
}

type Notification_AlertStarted struct {
	// Automatically marked active when received
	AlertStarted *Notification_AlertChange `protobuf:"bytes,4,opt,name=alert_started,json=alertStarted,proto3,oneof"`
}

type Notification_AlertStopped struct {
	// Automatically marks all of the same host+name inactive
	AlertStopped *Notification_AlertChange `protobuf:"bytes,5,opt,name=alert_stopped,json=alertStopped,proto3,oneof"`
}

type Notification_ActivityStarted struct {
	// Automatically marked active when received. All alerts are marked
	// inactive.
	ActivityStarted *Notification_StatusChange `protobuf:"bytes,6,opt,name=activity_started,json=activityStarted,proto3,oneof"`
}

type Notification_ActivityDone struct {
	// Automatically marks all of the same host+name inactive including alerts.
	ActivityDone *Notification_StatusChange `protobuf:"bytes,7,opt,name=activity_done,json=activityDone,proto3,oneof"`
}

type Notification_ActivityStopped struct {
	// Automatically marked active when received. All alerts are marked
	// inactive.
	ActivityStopped *Notification_StatusChange `protobuf:"bytes,8,opt,name=activity_stopped,json=activityStopped,proto3,oneof"`
}

func (*Notification_AlertStarted) isNotification_Detail() {}

func (*Notification_AlertStopped) isNotification_Detail() {}

func (*Notification_ActivityStarted) isNotification_Detail() {}

func (*Notification_ActivityDone) isNotification_Detail() {}

func (*Notification_ActivityStopped) isNotification_Detail() {}

type HostConfig_Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Exec        *HostConfig_Exec     `protobuf:"bytes,3,opt,name=exec,proto3" json:"exec,omitempty"`
	ExecFreq    *durationpb.Duration `protobuf:"bytes,4,opt,name=exec_freq,json=execFreq,proto3" json:"exec_freq,omitempty"`
	Exported    bool                 `protobuf:"varint,5,opt,name=exported,proto3" json:"exported,omitempty"`
	// If true, and rows returned from the last query will trigger an alert. If
	// the query constantly flaps (i.e. returns a value then doesn't), a lot of
	// alerts will occur. It is currently the query writer's responsibility to
	// do whatever is necessary to prevent flapping (e.g. store state and wait
	// until after so long).
	// TODO(cretz): How best to report the detailed alerting data?
	AlertIfResults bool `protobuf:"varint,6,opt,name=alert_if_results,json=alertIfResults,proto3" json:"alert_if_results,omitempty"`
}

func (x *HostConfig_Metric) Reset() {
	*x = HostConfig_Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostConfig_Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostConfig_Metric) ProtoMessage() {}

func (x *HostConfig_Metric) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostConfig_Metric.ProtoReflect.Descriptor instead.
func (*HostConfig_Metric) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{14, 0}
}

func (x *HostConfig_Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HostConfig_Metric) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HostConfig_Metric) GetExec() *HostConfig_Exec {
	if x != nil {
		return x.Exec
	}
	return nil
}

func (x *HostConfig_Metric) GetExecFreq() *durationpb.Duration {
	if x != nil {
		return x.ExecFreq
	}
	return nil
}

func (x *HostConfig_Metric) GetExported() bool {
	if x != nil {
		return x.Exported
	}
	return false
}

func (x *HostConfig_Metric) GetAlertIfResults() bool {
	if x != nil {
		return x.AlertIfResults
	}
	return false
}

type HostConfig_Exec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Exec:
	//	*HostConfig_Exec_SqlQueryTemplate
	Exec isHostConfig_Exec_Exec `protobuf_oneof:"exec"`
}

func (x *HostConfig_Exec) Reset() {
	*x = HostConfig_Exec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostConfig_Exec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostConfig_Exec) ProtoMessage() {}

func (x *HostConfig_Exec) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostConfig_Exec.ProtoReflect.Descriptor instead.
func (*HostConfig_Exec) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{14, 1}
}

func (m *HostConfig_Exec) GetExec() isHostConfig_Exec_Exec {
	if m != nil {
		return m.Exec
	}
	return nil
}

func (x *HostConfig_Exec) GetSqlQueryTemplate() string {
	if x, ok := x.GetExec().(*HostConfig_Exec_SqlQueryTemplate); ok {
		return x.SqlQueryTemplate
	}
	return ""
}

type isHostConfig_Exec_Exec interface {
	isHostConfig_Exec_Exec()
}

type HostConfig_Exec_SqlQueryTemplate struct {
	// For regular metrics, the set of queries herein should delete to enforce
	// retention and insert for the collected value. For alerting metrics,
	// this should usually also select values for return as the last query.
	SqlQueryTemplate string `protobuf:"bytes,1,opt,name=sql_query_template,json=sqlQueryTemplate,proto3,oneof"`
}

func (*HostConfig_Exec_SqlQueryTemplate) isHostConfig_Exec_Exec() {}

type Notification_AlertChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"` // TODO(cretz): How best to report data?
}

func (x *Notification_AlertChange) Reset() {
	*x = Notification_AlertChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification_AlertChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification_AlertChange) ProtoMessage() {}

func (x *Notification_AlertChange) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification_AlertChange.ProtoReflect.Descriptor instead.
func (*Notification_AlertChange) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{16, 1}
}

func (x *Notification_AlertChange) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Notification_StatusChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Notification_StatusChange) Reset() {
	*x = Notification_StatusChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_monitoralpb_monitoral_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification_StatusChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification_StatusChange) ProtoMessage() {}

func (x *Notification_StatusChange) ProtoReflect() protoreflect.Message {
	mi := &file_monitoralpb_monitoral_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification_StatusChange.ProtoReflect.Descriptor instead.
func (*Notification_StatusChange) Descriptor() ([]byte, []int) {
	return file_monitoralpb_monitoral_proto_rawDescGZIP(), []int{16, 2}
}

func (x *Notification_StatusChange) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_monitoralpb_monitoral_proto protoreflect.FileDescriptor

var file_monitoralpb_monitoral_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x70, 0x62, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x70, 0x62,
	0x2f, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x13, 0x48, 0x6f,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4e, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xbf, 0x01, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x52, 0x75, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x22, 0x70, 0x0a, 0x17, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x71, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc9, 0x02, 0x0a, 0x12, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a,
	0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x19, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x64, 0x0a, 0x20, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x1e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x18, 0x0a, 0x16,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x70, 0x0a, 0x17, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x71, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x78, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0xef,
	0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x04, 0x65, 0x78,
	0x65, 0x63, 0x12, 0x36, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x46, 0x72, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x69, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x66, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0x3e, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x63,
	0x22, 0xfc, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc1, 0x06, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x54, 0x0a, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x2f, 0x0a, 0x0b, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x26, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x32, 0xb6, 0x0b, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61,
	0x6c, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3e, 0x8a,
	0xc4, 0x03, 0x3a, 0x12, 0x09, 0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x12,
	0x0a, 0x10, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x1a, 0x0d,
	0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a,
	0x07, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x04,
	0xa2, 0xc4, 0x03, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x04, 0x92, 0xc4, 0x03, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x48, 0x6f, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x04, 0xa2, 0xc4,
	0x03, 0x00, 0x12, 0x5f, 0x0a, 0x18, 0x48, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x25,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x04, 0x92,
	0xc4, 0x03, 0x00, 0x12, 0x47, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x12,
	0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x04, 0xa2, 0xc4, 0x03, 0x00, 0x12, 0x58, 0x0a, 0x0b,
	0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0xaa, 0xc4, 0x03, 0x00, 0x12, 0x60, 0x0a, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x20, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x04, 0x92, 0xc4, 0x03, 0x00, 0x12, 0xb3, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x23, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x64, 0x8a, 0xc4, 0x03, 0x60, 0x0a, 0x18,
	0x0a, 0x16, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x0a, 0x11, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x12, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1b, 0x0a, 0x19, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b,
	0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x04, 0xa2, 0xc4, 0x03, 0x00, 0x12, 0x63, 0x0a, 0x1a, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x04, 0x92, 0xc4, 0x03, 0x00,
	0x12, 0x69, 0x0a, 0x19, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x04, 0xa2, 0xc4, 0x03, 0x00, 0x12, 0x79, 0x0a, 0x16, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x04, 0x9a, 0xc4, 0x03, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x04, 0x9a, 0xc4, 0x03, 0x00, 0x42, 0x28, 0x5a, 0x26,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x72, 0x65, 0x74, 0x7a,
	0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x61, 0x6c, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_monitoralpb_monitoral_proto_rawDescOnce sync.Once
	file_monitoralpb_monitoral_proto_rawDescData = file_monitoralpb_monitoral_proto_rawDesc
)

func file_monitoralpb_monitoral_proto_rawDescGZIP() []byte {
	file_monitoralpb_monitoral_proto_rawDescOnce.Do(func() {
		file_monitoralpb_monitoral_proto_rawDescData = protoimpl.X.CompressGZIP(file_monitoralpb_monitoral_proto_rawDescData)
	})
	return file_monitoralpb_monitoral_proto_rawDescData
}

var file_monitoralpb_monitoral_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_monitoralpb_monitoral_proto_goTypes = []interface{}{
	(*HostWorkflowRequest)(nil),              // 0: monitoral.v1.HostWorkflowRequest
	(*HostRunRequest)(nil),                   // 1: monitoral.v1.HostRunRequest
	(*HostUpdateConfigRequest)(nil),          // 2: monitoral.v1.HostUpdateConfigRequest
	(*HostDoneRequest)(nil),                  // 3: monitoral.v1.HostDoneRequest
	(*HostCollectRequest)(nil),               // 4: monitoral.v1.HostCollectRequest
	(*HostCollectResponse)(nil),              // 5: monitoral.v1.HostCollectResponse
	(*SystemWorkflowRequest)(nil),            // 6: monitoral.v1.SystemWorkflowRequest
	(*SystemUpdateConfigRequest)(nil),        // 7: monitoral.v1.SystemUpdateConfigRequest
	(*SystemUpdateNotificationsRequest)(nil), // 8: monitoral.v1.SystemUpdateNotificationsRequest
	(*SystemGetNotificationsRequest)(nil),    // 9: monitoral.v1.SystemGetNotificationsRequest
	(*SystemGetNotificationsResponse)(nil),   // 10: monitoral.v1.SystemGetNotificationsResponse
	(*SystemGetConfigRequest)(nil),           // 11: monitoral.v1.SystemGetConfigRequest
	(*SystemGetConfigResponse)(nil),          // 12: monitoral.v1.SystemGetConfigResponse
	(*SystemConfig)(nil),                     // 13: monitoral.v1.SystemConfig
	(*HostConfig)(nil),                       // 14: monitoral.v1.HostConfig
	(*Metric)(nil),                           // 15: monitoral.v1.Metric
	(*Notification)(nil),                     // 16: monitoral.v1.Notification
	(*HostConfig_Metric)(nil),                // 17: monitoral.v1.HostConfig.Metric
	(*HostConfig_Exec)(nil),                  // 18: monitoral.v1.HostConfig.Exec
	nil,                                      // 19: monitoral.v1.Metric.LabelsEntry
	nil,                                      // 20: monitoral.v1.Notification.LabelsEntry
	(*Notification_AlertChange)(nil),         // 21: monitoral.v1.Notification.AlertChange
	(*Notification_StatusChange)(nil),        // 22: monitoral.v1.Notification.StatusChange
	(*durationpb.Duration)(nil),              // 23: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),            // 24: google.protobuf.Timestamp
	(*anypb.Any)(nil),                        // 25: google.protobuf.Any
	(*emptypb.Empty)(nil),                    // 26: google.protobuf.Empty
}
var file_monitoralpb_monitoral_proto_depIdxs = []int32{
	1,  // 0: monitoral.v1.HostWorkflowRequest.continue_run_request:type_name -> monitoral.v1.HostRunRequest
	14, // 1: monitoral.v1.HostRunRequest.configs:type_name -> monitoral.v1.HostConfig
	14, // 2: monitoral.v1.HostUpdateConfigRequest.configs:type_name -> monitoral.v1.HostConfig
	23, // 3: monitoral.v1.HostCollectRequest.collected_since:type_name -> google.protobuf.Duration
	23, // 4: monitoral.v1.HostCollectRequest.collected_until:type_name -> google.protobuf.Duration
	15, // 5: monitoral.v1.HostCollectResponse.metrics:type_name -> monitoral.v1.Metric
	13, // 6: monitoral.v1.SystemUpdateConfigRequest.config:type_name -> monitoral.v1.SystemConfig
	16, // 7: monitoral.v1.SystemUpdateNotificationsRequest.notifications:type_name -> monitoral.v1.Notification
	16, // 8: monitoral.v1.SystemGetNotificationsResponse.notification:type_name -> monitoral.v1.Notification
	13, // 9: monitoral.v1.SystemGetConfigResponse.config:type_name -> monitoral.v1.SystemConfig
	14, // 10: monitoral.v1.SystemConfig.host_configs:type_name -> monitoral.v1.HostConfig
	17, // 11: monitoral.v1.HostConfig.metrics:type_name -> monitoral.v1.HostConfig.Metric
	24, // 12: monitoral.v1.Metric.collected_on:type_name -> google.protobuf.Timestamp
	25, // 13: monitoral.v1.Metric.value:type_name -> google.protobuf.Any
	19, // 14: monitoral.v1.Metric.labels:type_name -> monitoral.v1.Metric.LabelsEntry
	21, // 15: monitoral.v1.Notification.alert_started:type_name -> monitoral.v1.Notification.AlertChange
	21, // 16: monitoral.v1.Notification.alert_stopped:type_name -> monitoral.v1.Notification.AlertChange
	22, // 17: monitoral.v1.Notification.activity_started:type_name -> monitoral.v1.Notification.StatusChange
	22, // 18: monitoral.v1.Notification.activity_done:type_name -> monitoral.v1.Notification.StatusChange
	22, // 19: monitoral.v1.Notification.activity_stopped:type_name -> monitoral.v1.Notification.StatusChange
	24, // 20: monitoral.v1.Notification.started_on:type_name -> google.protobuf.Timestamp
	20, // 21: monitoral.v1.Notification.labels:type_name -> monitoral.v1.Notification.LabelsEntry
	18, // 22: monitoral.v1.HostConfig.Metric.exec:type_name -> monitoral.v1.HostConfig.Exec
	23, // 23: monitoral.v1.HostConfig.Metric.exec_freq:type_name -> google.protobuf.Duration
	0,  // 24: monitoral.v1.Monitoral.HostWorkflow:input_type -> monitoral.v1.HostWorkflowRequest
	1,  // 25: monitoral.v1.Monitoral.HostRun:input_type -> monitoral.v1.HostRunRequest
	1,  // 26: monitoral.v1.Monitoral.HostRunActivity:input_type -> monitoral.v1.HostRunRequest
	2,  // 27: monitoral.v1.Monitoral.HostUpdateConfig:input_type -> monitoral.v1.HostUpdateConfigRequest
	2,  // 28: monitoral.v1.Monitoral.HostUpdateConfigActivity:input_type -> monitoral.v1.HostUpdateConfigRequest
	3,  // 29: monitoral.v1.Monitoral.HostDone:input_type -> monitoral.v1.HostDoneRequest
	4,  // 30: monitoral.v1.Monitoral.HostCollect:input_type -> monitoral.v1.HostCollectRequest
	4,  // 31: monitoral.v1.Monitoral.HostCollectActivity:input_type -> monitoral.v1.HostCollectRequest
	6,  // 32: monitoral.v1.Monitoral.SystemWorkflow:input_type -> monitoral.v1.SystemWorkflowRequest
	7,  // 33: monitoral.v1.Monitoral.SystemUpdateConfig:input_type -> monitoral.v1.SystemUpdateConfigRequest
	7,  // 34: monitoral.v1.Monitoral.SystemUpdateConfigActivity:input_type -> monitoral.v1.SystemUpdateConfigRequest
	8,  // 35: monitoral.v1.Monitoral.SystemUpdateNotifications:input_type -> monitoral.v1.SystemUpdateNotificationsRequest
	9,  // 36: monitoral.v1.Monitoral.SystemGetNotifications:input_type -> monitoral.v1.SystemGetNotificationsRequest
	11, // 37: monitoral.v1.Monitoral.SystemGetConfig:input_type -> monitoral.v1.SystemGetConfigRequest
	26, // 38: monitoral.v1.Monitoral.HostWorkflow:output_type -> google.protobuf.Empty
	26, // 39: monitoral.v1.Monitoral.HostRun:output_type -> google.protobuf.Empty
	1,  // 40: monitoral.v1.Monitoral.HostRunActivity:output_type -> monitoral.v1.HostRunRequest
	26, // 41: monitoral.v1.Monitoral.HostUpdateConfig:output_type -> google.protobuf.Empty
	26, // 42: monitoral.v1.Monitoral.HostUpdateConfigActivity:output_type -> google.protobuf.Empty
	26, // 43: monitoral.v1.Monitoral.HostDone:output_type -> google.protobuf.Empty
	5,  // 44: monitoral.v1.Monitoral.HostCollect:output_type -> monitoral.v1.HostCollectResponse
	5,  // 45: monitoral.v1.Monitoral.HostCollectActivity:output_type -> monitoral.v1.HostCollectResponse
	26, // 46: monitoral.v1.Monitoral.SystemWorkflow:output_type -> google.protobuf.Empty
	26, // 47: monitoral.v1.Monitoral.SystemUpdateConfig:output_type -> google.protobuf.Empty
	26, // 48: monitoral.v1.Monitoral.SystemUpdateConfigActivity:output_type -> google.protobuf.Empty
	26, // 49: monitoral.v1.Monitoral.SystemUpdateNotifications:output_type -> google.protobuf.Empty
	10, // 50: monitoral.v1.Monitoral.SystemGetNotifications:output_type -> monitoral.v1.SystemGetNotificationsResponse
	12, // 51: monitoral.v1.Monitoral.SystemGetConfig:output_type -> monitoral.v1.SystemGetConfigResponse
	38, // [38:52] is the sub-list for method output_type
	24, // [24:38] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_monitoralpb_monitoral_proto_init() }
func file_monitoralpb_monitoral_proto_init() {
	if File_monitoralpb_monitoral_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_monitoralpb_monitoral_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostUpdateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostDoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostCollectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostCollectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemUpdateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemUpdateNotificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemGetNotificationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemGetNotificationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemGetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemGetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostConfig_Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostConfig_Exec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification_AlertChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_monitoralpb_monitoral_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification_StatusChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_monitoralpb_monitoral_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Notification_AlertStarted)(nil),
		(*Notification_AlertStopped)(nil),
		(*Notification_ActivityStarted)(nil),
		(*Notification_ActivityDone)(nil),
		(*Notification_ActivityStopped)(nil),
	}
	file_monitoralpb_monitoral_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*HostConfig_Exec_SqlQueryTemplate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_monitoralpb_monitoral_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_monitoralpb_monitoral_proto_goTypes,
		DependencyIndexes: file_monitoralpb_monitoral_proto_depIdxs,
		MessageInfos:      file_monitoralpb_monitoral_proto_msgTypes,
	}.Build()
	File_monitoralpb_monitoral_proto = out.File
	file_monitoralpb_monitoral_proto_rawDesc = nil
	file_monitoralpb_monitoral_proto_goTypes = nil
	file_monitoralpb_monitoral_proto_depIdxs = nil
}
