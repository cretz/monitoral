syntax = "proto3";

option go_package = "github.com/cretz/monitoral/monitoralpb";

package monitoral.v1;

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "temporalpb/sdk.proto";

service Monitoral {
  // HostWorkflow runs on the system task queue and maintains a long-running
  // activity on the host. This will contain the following search attributes:
  // * "monitoral-host" - Hostname
  // * "monitoral-tags" - String array of tags
  rpc HostWorkflow(HostWorkflowRequest) returns (google.protobuf.Empty) {
    option (temporal.sdk.workflow) = {
      signal: { ref: 'HostRun' }
      signal: { ref: 'HostUpdateConfig' }
      signal: { ref: 'HostDone' }
      call: { ref: 'HostCollect' }
    };
  }

  // HostRun is sent as signal-with-start to HostWorkflow to start or restart
  // the long-running activity on the host with the given task queue. If it is a
  // restart, the existing activity is expected to be cancelled if
  // running.
  rpc HostRun(HostRunRequest) returns (google.protobuf.Empty) {
    option (temporal.sdk.signal) = { };
  }

  // HostRunActivity is the long-running activity on the host. This only returns
  // successfully on cancel and the value can be used to call again to resume
  // where left off.
  rpc HostRunActivity(HostRunRequest) returns (HostRunRequest) {
    option (temporal.sdk.activity) = { };
  }

  // HostUpdateConfig requests the workflow to update the given configurations.
  // This is usually called from an activity from the system workflow to update
  // config.
  //
  // There is a known race condition where a config can be updated on the system
  // workflow while a host is just getting started and therefore the host may
  // not by in the list to update. It is encumbent upon the host workflow
  // starter to wait a reasonable amount of time after the workflow is started
  // and check that the config didn't change or if it did, re-deliver the
  // signal.
  rpc HostUpdateConfig(HostUpdateConfigRequest) returns (google.protobuf.Empty) {
    option (temporal.sdk.signal) = { };
  }

  // HostUpdateConfigActivity is the update activity triggered by the signal.
  rpc HostUpdateConfigActivity(HostUpdateConfigRequest) returns (google.protobuf.Empty) {
    option (temporal.sdk.activity) = { };
  }

  // Signal sent when the host is known to be done. This is sent with a
  // signal-with-start so that it can make a new successfully closed workflow
  // on top of a failed one if necessary.
  rpc HostDone(HostDoneRequest) returns (google.protobuf.Empty) {
    option (temporal.sdk.signal) = { };
  }

  // HostCollect manually collects latest metrics for the host.
  rpc HostCollect(HostCollectRequest) returns (HostCollectResponse) {
    option (temporal.sdk.call) = { };
  }

  // HostCollectActivity is the collect activity triggered by the call.
  rpc HostCollectActivity(HostCollectRequest) returns (HostCollectResponse) {
    option (temporal.sdk.activity) = { };
  }

  // SystemWorkflow is the single workflow for managing config and
  // notifications.
  rpc SystemWorkflow(SystemWorkflowRequest) returns (google.protobuf.Empty) {
    option (temporal.sdk.workflow) = {
      signal: { ref: 'SystemUpdateConfig' }
      signal: { ref: 'SystemUpdateNotifications' }
      query: { ref: 'SystemGetNotifications' }
      query: { ref: 'SystemGetConfig' }
    };
  }

  // SystemUpdateConfig is the signal to update the entire config.
  rpc SystemUpdateConfig(SystemUpdateConfigRequest) returns (google.protobuf.Empty) {
    option (temporal.sdk.signal) = { };
  }

  // SystemUpdateConfigActivity is the update activity triggered by the signal.
  rpc SystemUpdateConfigActivity(SystemUpdateConfigRequest) returns (google.protobuf.Empty) {
    option (temporal.sdk.activity) = { };
  }

  // SystemUpdateNotifications creates/updates notifications.
  rpc SystemUpdateNotifications(SystemUpdateNotificationsRequest) returns (google.protobuf.Empty) {
    option (temporal.sdk.signal) = { };
  }

  // SystemGetNotifications returns notifications.
  rpc SystemGetNotifications(SystemGetNotificationsRequest) returns (SystemGetNotificationsResponse) {
    option (temporal.sdk.query) = { };
  }

  // SystemGetConfig returns the current system config.
  rpc SystemGetConfig(SystemGetConfigRequest) returns (SystemGetConfigResponse) {
    option (temporal.sdk.query) = { };
  }
}

message HostWorkflowRequest {
  // Should only be set on continue-as-new
  HostRunRequest continue_run_request = 1;
}

message HostRunRequest {
  // This should be unique every time the host worker process is started
  string task_queue = 1;
  // This may be older than one from update config request, so the workflow is
  // responsible for only using the newest. Always greater than 0.
  uint64 config_mutation_seq = 2;
  repeated HostConfig configs = 3;
  bytes prev_run_snapshot = 4;
}

message HostUpdateConfigRequest {
  // May not be sequential, but should be discarded if this is before the last
  // received seq. Always greater than 0.
  uint64 mutation_seq = 1;
  // This is the full set of known configs for the tags. This means on update
  // a tag can be not present here which means a deleted config.
  repeated HostConfig configs = 2;
}

message HostDoneRequest {
}

message HostCollectRequest {
  // If empty, assumes all exported metrics
  repeated string metrics = 1;
  // Both of these are inclusive, neither are required.
  google.protobuf.Duration collected_since = 2;
  google.protobuf.Duration collected_until = 3;

  // If true, only the latest metric per name is given.
  bool latest_only = 4;

  // Metadata needed for a "call"
  string id = 5;
  string response_task_queue = 6;
  string response_workflow_id = 7;
}

message HostCollectResponse {
  repeated Metric metrics = 1;
  // No metrics present if there is an error
  string error = 2;

  // Metadata needed for a "call"
  string id = 3;
}

message SystemWorkflowRequest {
}

message SystemUpdateConfigRequest {
  SystemConfig config = 1;
}

message SystemUpdateNotificationsRequest {
  repeated Notification notifications = 1;
}

message SystemGetNotificationsRequest {
  // TODO(cretz): string query = 1;
}

message SystemGetNotificationsResponse {
  repeated Notification notification = 1;
  uint64 archived_notifications = 3;
}

message SystemGetConfigRequest {
}

message SystemGetConfigResponse {
  // May not be sequential, but can be used to determine order. Always greater
  // than 0.
  uint64 mutation_seq = 1;
  // Replaces entire existing config
  SystemConfig config = 2;
}

message SystemConfig {
  repeated HostConfig host_configs = 1;
  // Defaults to a reasonable number
  uint32 max_notifications = 2;
}

message HostConfig {
  string tag = 1;

  repeated Metric metrics = 2;

  message Metric {
    string name = 1;
    string description = 2;
    Exec exec = 3;
    google.protobuf.Duration exec_freq = 4;
    bool exported = 5;
    // If true, and rows returned from the last query will trigger an alert. If
    // the query constantly flaps (i.e. returns a value then doesn't), a lot of
    // alerts will occur. It is currently the query writer's responsibility to
    // do whatever is necessary to prevent flapping (e.g. store state and wait
    // until after so long).
    // TODO(cretz): How best to report the detailed alerting data?
    bool alert_if_results = 6;
  }

  message Exec {
    oneof exec {
      // For regular metrics, the set of queries herein should delete to enforce
      // retention and insert for the collected value. For alerting metrics,
      // this should usually also select values for return as the last query.
      string sql_query_template = 1;
    }
  }
}

message Metric {
  string name = 1;
  google.protobuf.Timestamp collected_on = 2;
  google.protobuf.Any value = 3;
  map<string, string> labels = 4;
}

message Notification {
  // Automatically populated if empty on update
  string id = 1;

  string host = 2;

  // Only the latest of the name is active
  string name = 3;

  oneof detail {
    // Automatically marked active when received
    AlertChange alert_started = 4;
    // Automatically marks all of the same host+name inactive
    AlertChange alert_stopped = 5;
    // Automatically marked active when received. All alerts are marked
    // inactive.
    StatusChange activity_started = 6;
    // Automatically marks all of the same host+name inactive including alerts.
    StatusChange activity_done = 7;
    // Automatically marked active when received. All alerts are marked
    // inactive.
    StatusChange activity_stopped = 8;
  }

  // Automatically populated if empty on update
  google.protobuf.Timestamp started_on = 9;
  string notes = 10;
  map<string, string> labels = 11;
  // Automatically defaulted to true when first seen
  bool visible = 12;
  // This is a system controlled value, cannot be mutated. Is only true if there
  // is an active alert, activity start, or activity stop.
  bool active = 13;

  message AlertChange {
    string description = 1;
    // TODO(cretz): How best to report data?
  }

  message StatusChange {
    string reason = 1;
  }
}
